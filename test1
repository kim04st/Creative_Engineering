1. 창의공학을 통해서 학생들이 학습해야 할 내용에 대해 5가지를 적으시오.
공학도로서 창의성을 발휘할 수 있도록 한다. 팁과 협업하고 소통할 수 있는 기초를 다진다. AI를 시스템에 적용할 수 있다.
아두이노를 활용하여 IoT 관련 생활에 유용한 제품을 제작할 수 있다. 로봇을 스마트폰으로 구동하고 원하는 위치로 제어할 수 있다.

2. 스마트폰으로 집의 전등을 켜고 끄는 시스템을 설계하고 제작하는 과정을 유무선 통신을 포함한 과정을 자세히 설명하시오.
스마트폰에서 ON, OFF버튼을 눌렀을 때, 0 또는 1이 와이파이를 통해 서버로 전송되는 프로그램 작성하기
서버에서 보낸 0또는 1을 수신하는 임베디드 프로그램 작성하기
와이파이를 통해 임베디드 컴퓨터와 스마트폰을 무선으로 연결하기
0또는 1을 입력받았을 때 ON,OFF로 움직이는 전등 스위치 제작하기
임베디드 컴퓨터와 스위치를 유선 연결하기

3. 아두이노의 스위치를 읽고 서버로 1초에 1회씩 전송하는 코드와 서버에서 수신하여 1이면 초록색, 2이면 검은색으로 바꾸는 코드를 적으시오.
아두이노 코드
--------------------------------------------------
void setup() {
  pinMode(11, INPUT_PULLUP);
  Serial.begin(9600);
}

void loop() {
  int a = digitalRead(11);
  if (a == HIGH) {
    Serial.println("1"); // 디지털 핀 11이 HIGH인 경우 "1"을 보냅니다.
  } else {
    Serial.println("2"); // 디지털 핀 11이 LOW인 경우 "2"를 보냅니다.
  }
  delay(1000);
}
--------------------------------------------------
processing 코드
--------------------------------------------------
import processing.serial.*;
Serial p;
void setup(){
  p = new Serial(this, "COM5", 9600);
}
String m="";
void draw(){
  if(p.available()>0){
    m = p.readStringUntil('\n');
    if(m!=null){
      print(m);
      if(m.indexOf('1')==0) background(0,255,0);
      if(m.indexOf('2')==0) background(0,0,0);
    }
  }
}
--------------------------------------------------
4.서버에서 스마트폰으로 1을 보내면 스마트폰의 화면이 푸른색으로, 0을 보내면 붉은 색으로 보내는 코드를 적으시오. 앱 인벤터의 컴포넌트와 내용을 적으시오.

5. 스마트폰에서 ON 버튼을 누르면 서버를 거쳐 아두이노의 7번 핀의 LED 켜지고, off 버튼을 누르면 7번 핀의 LED가 꺼진다. 스마트폰의 텍스트 박스에 숫자 1부터 8중에 하나를 넣고 send 버튼을 누르면
아두이노의 4번 핀에 달린 피에조 스피커가 도, 레, ~ 시, 도 가 작동되도록 하시오.
----------------------------------------------------------------------------------------------------
아두이노
----------------------------------------------------------------------------------------------------
int ledPin = 7; // LED를 연결한 핀 (7번 핀)
int speakerPin = 4; // 피에조 스피커를 연결한 핀 (4번 핀)

void setup() {
  pinMode(7, OUTPUT);
  pinMode(4, OUTPUT);
  Serial.begin(9600); // 시리얼 통신을 초기화합니다.
}

void loop() {
  if (Serial.available() > 0) {
    char command = Serial.read(); // 시리얼 통신으로부터 명령을 읽습니다.

    if (command == "ON") {
      digitalWrite(ledPin, HIGH); // LED를 켭니다.
    } else if (command == "OFF") {
      digitalWrite(ledPin, LOW); // LED를 끕니다.
    } else if (command >= '1' && command <= '8') {
      int frequency = 0;
      // 입력된 숫자에 따라 피에조 스피커의 주파수를 설정합니다.
      switch (command) {
        case '1': frequency = 261; // 도
        break;
        case '2': frequency = 293; // 레
        break;
        case '3': frequency = 329; // 미
        break;
        case '4': frequency = 349; // 파
        break;
        case '5': frequency = 392; // 솔
        break;
        case '6': frequency = 440; // 라
        break;
        case '7': frequency = 493; // 시
        break;
        case '8': frequency = 523; // 도 (고음)
        break;
      }
      tone(speakerPin, frequency); // 피에조 스피커를 주어진 주파수로 설정합니다.
      delay(500); // 0.5초 동안 소리를 유지합니다.
      noTone(speakerPin); // 소리를 끕니다.
    }
  }
}
----------------------------------------------------------------------------------------------------
processing
----------------------------------------------------------------------------------------------------
import processing.net.*;

Server server; // 서버 객체
Client client; // 클라이언트 객체

void setup() {
  size(200, 200);
  server = new Server(this, 12345); // 서버를 12345 포트에서 시작합니다.
}

void draw() {
  background(255);
  if (client != null) {
    if (client.available() > 0) {
      String message = client.readString(); // 클라이언트로부터 메시지를 읽습니다.
      println("Received: " + message);

      // 아두이노로 메시지 전송
      if (message.equals("ON") || message.equals("OFF")) {
        client.write(message); // 클라이언트로부터 받은 메시지를 아두이노로 전송합니다.
      } 
      // 숫자를 아두이노로 전송
      else if (message.equals("1") || message.equals("2") || message.equals("3") ||
               message.equals("4") || message.equals("5") || message.equals("6") ||
               message.equals("7") || message.equals("8")) {
        client.write(message); // 클라이언트로부터 받은 숫자를 아두이노로 전송합니다.
      }
    }
  }
}

void serverEvent(Server s, Client c) {
  client = c; // 클라이언트가 연결되었을 때 클라이언트 객체를 설정합니다.
}
